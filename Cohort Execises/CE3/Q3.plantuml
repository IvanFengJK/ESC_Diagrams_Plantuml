@startuml Q3
!theme toy
participant "S1:Caller" as s1
participant "T1 Switch" as t1
participant "S2:Caller" as s2

' This sequence diagram assumes that caller S1 is the first to initiate the call 
' by lifting up the receiver first, and that both callers S1 and S2 take the same 
' amount of time for each of their actions.

' S1 first initiates the call to S2. S2 then initiates the call to S1
s1 -> t1 : Lift_Receiver()
s2 -> t1 : Lift_Receiver()

t1 ->> s1: Send_DialTone()
t1 ->> s2: Send_DialTone()

s1 -> t1: Dial_Number(N1)
s2 -> t1: Dial_Number(N2)

' Switch T1 successfully verifies the validity of the numbers called by both Callers.
activate t1
t1 --[#DDDDDD]> t1 : Check_Number(N1)
t1 --[#DDDDDD]> t1 : Check_Number(N2)
deactivate t1
t1 -> t1: validity

' Switch T1 sends a ring tone to S2 first, as S1 is first to call S2
' Switch T1 then does the same for S1
t1 ->> s2: Send_Ringtone()
t1 ->> s1: Send_Ringtone()

' A wait tone is first sent to S1, followed by S2
t1 ->> s1: Send_WaitTone()
t1 ->> s2: Send_WaitTone()

'S1 times out first, and is the first caller to be sent a busy tone by T1

s1 -> s1: Timeout(1 Sec)
t1 ->> s1: Send_BusyTone()

' the same then occurs for S2
s2 -> s2: Timeout(1 Sec)
t1 ->> s2: Send_BusyTone()

' With both calls failing to establish, both S1 amd S2 hang up.
s1 -> t1: Hangup
s2 -> t1: Hangup

@enduml

